/* Basic Queries */

-- Q1 Retrieve the total number of orders placed.
SELECT COUNT(order_id) FROM orders;

-- Q2 Calculate the total revenue generated from pizza sales.
SELECT ROUND(SUM(p.price * o.quantity), 2) AS revenue
FROM pizzas AS p
JOIN order_details AS o ON p.pizza_id = o.pizza_id;

-- Q3 Identify the highest-priced pizza.
SELECT 
    pt.name, MAX(p.price) AS max_price
FROM
    pizza_types AS pt
JOIN
    pizzas AS p ON pt.pizza_type_id = p.pizza_type_id
GROUP BY pt.name
ORDER BY max_price DESC
LIMIT 1;

-- Q4 Identify the most common pizza size ordered.
SELECT 
    p.size, SUM(od.quantity) AS total_quantity
FROM
    pizzas AS p
JOIN
    order_details AS od ON p.pizza_id = od.pizza_id
GROUP BY p.size
ORDER BY total_quantity DESC
LIMIT 1;

-- Q5 List the top 5 most ordered pizza types along with their quantities.
SELECT 
    pt.name AS pizza_name, 
    SUM(od.quantity) AS quantities
FROM
    pizza_types AS pt
JOIN
    pizzas AS p ON pt.pizza_type_id = p.pizza_type_id
JOIN 
    order_details AS od ON od.pizza_id = p.pizza_id
GROUP BY 
    pt.name
ORDER BY 
    quantities DESC
LIMIT 5;

/* Intermediate Queries */

-- Q6 Find the total quantity of each pizza category ordered.
SELECT pt.category, SUM(od.quantity) AS total_quantity 
FROM pizza_types AS pt 
JOIN pizzas AS p ON pt.pizza_type_id = p.pizza_type_id 
JOIN order_details AS od ON p.pizza_id = od.pizza_id 
GROUP BY pt.category 
ORDER BY total_quantity;

-- Q7 Determine the distribution of orders by hour of the day.
SELECT COUNT(order_id) AS total_orders, HOUR(orders_time) AS order_hour
FROM orders 
GROUP BY order_hour;

-- Q8 Find the category-wise distribution of pizzas.
SELECT category, COUNT(name) AS total_pizzas 
FROM pizza_types 
GROUP BY category 
ORDER BY total_pizzas;

-- Q9 Calculate the average number of pizzas ordered per day.
SELECT 
    ROUND(AVG(quantity), 0) AS avg_pizzas_per_day
FROM
    (SELECT 
        o.orders_date AS order_date, SUM(od.quantity) AS quantity
    FROM
        orders AS o
    JOIN order_details AS od ON o.order_id = od.order_id
    GROUP BY order_date) AS daily_orders;

-- Q10 Determine the top 3 most ordered pizza types based on revenue.
SELECT 
    pt.name, SUM(p.price * od.quantity) AS revenue
FROM
    pizza_types AS pt
JOIN
    pizzas AS p ON pt.pizza_type_id = p.pizza_type_id 
JOIN 
    order_details AS od ON p.pizza_id = od.pizza_id 
GROUP BY pt.name 
ORDER BY revenue DESC 
LIMIT 3;

/* Advanced Queries */

-- Q11 Calculate the percentage contribution of each pizza category to total revenue.
SELECT pt.category, 
       ROUND(SUM(p.price * od.quantity) / (SELECT SUM(p.price * o.quantity) 
                                          FROM pizzas AS p 
                                          JOIN order_details AS o ON p.pizza_id = o.pizza_id) * 100, 2) AS revenue_percentage
FROM pizza_types AS pt
JOIN pizzas AS p ON pt.pizza_type_id = p.pizza_type_id 
JOIN order_details AS od ON p.pizza_id = od.pizza_id 
GROUP BY pt.category 
ORDER BY revenue_percentage DESC;

-- Q12 Analyze the cumulative revenue generated over time.
SELECT orders_date, SUM(revenue) OVER(ORDER BY orders_date) AS cumulative_revenue 
FROM (SELECT 
    o.orders_date, SUM(p.price * od.quantity) AS revenue
FROM
    orders AS o
JOIN order_details AS od ON o.order_id = od.order_id
JOIN pizzas AS p ON od.pizza_id = p.pizza_id 
GROUP BY o.orders_date) AS sales;

-- Q13 Determine the top 3 most ordered pizza types based on revenue for each pizza category.
SELECT name, revenue 
FROM (
    SELECT name, category, revenue, 
           RANK() OVER(PARTITION BY category ORDER BY revenue DESC) AS rank_num
    FROM (
        SELECT pt.name, pt.category, SUM(od.quantity * p.price) AS revenue 
        FROM pizza_types AS pt 
        JOIN pizzas AS p ON pt.pizza_type_id = p.pizza_type_id
        JOIN order_details AS od ON od.pizza_id = p.pizza_id 
        GROUP BY pt.name, pt.category) AS revenue_data) AS ranked_data  
WHERE rank_num <= 3;
